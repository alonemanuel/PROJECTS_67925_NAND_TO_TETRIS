// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static Array ram;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let ram[2048] = 14334;
        let ram[2049] = 2050 ;        
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block;
        if (size < 1)
        {
            do Sys.error(5);
        }
        let block = 2048;

        while (block[0]<size)
        {
            let block = block[1];
        }
        if (block + size > 16379)
        {
            do Sys.error(6);
        }
        if( block[0]  > ( size + 2 )  )
        {
            let block[size + 2 ] = block[0] - size - 2;

            if( block[1] = (block + 2))
            {
                let block[size+ 3] = block + size + 4;

            }
            else
            {
                let block[size + 3] = block[1] ;
            }
            let block[1] = block + size + 2;
        }
            let block[0] = 0;
            return block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int temp;
        var int ptr;
        let temp = o - 2;
        let ptr = temp[1];
        if (ptr[0] = 0)
        {
            let temp[0] = temp[1] -temp - 2;
        }
        else
        {
            let temp[0] = temp[1] - temp + ptr[0];
            if ( ptr[1] = (ptr + 2))
            {
                let temp[1] = temp + 2;
            }
            else
            {
                let temp[1] = ptr[1];
            }
        }
        return;

    }    
}
