// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array bit;
    static Array screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let screen = 16384;
        let color = true;
        let bit = Array.new(17);
        let bit[0] = 1;
        while ( i < 16 )
        {
            let i = i + 1;
            let bit[i] = bit[i-1] + bit[i-1];
        }
        return;
    }



    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        while ( i < 8192 )
        {
            let screen[i] = 0;
            let i = i + 1;
        }
        return;

    }
    function void updateLocation(int i, int location)
    {
        if ( color )
        {
            let screen[i] = screen[i] | location; 
        }
        else
        {
            let screen[i] =  screen[i] & ~(location);
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int tempX;
        var int xModulu16;
        var int screenBit;

        if ( (x<0) | (x>511) | (y<0) | (y>255) )
        {
            do Sys.error(7);
        }
        let tempX = Math.divide(x,16);
        let xModulu16 = x - Math.multiply(tempX,16);
        let screenBit = Math.multiply(y,32) + tempX;
        do Screen.updateLocation(screenBit,bit[xModulu16]);
        return;
    }

    function void drawConditional(int x, int y, boolean bool)
    {
        if (bool)
        {
            do Screen.drawPixel(y,x);
        }
        else
        {
            do Screen.drawPixel(x,y);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int i;
        var int j;
        var int yDist;
        var int xDist;
        var int temp1;
        var int temp2;
        var int yGreaterThenX;
        var boolean leftToRight;
        var int rightMost;
        var int temp3;
        var int temp4;


        if ( (x1 < 0) |  ( x2 > 511) | ( y1 < 0 ) | (y2 > 255) )
        {
            do Sys.error(8);
        }
        let xDist = Math.abs(x2 - x1);
        let yDist = Math.abs(y2 - y1);
        let yGreaterThenX = (xDist < yDist);
        if ( yGreaterThenX & (y2<y1) | (~yGreaterThenX & ( x2 < x1 ))  )
        {
            let temp1 = x1;
            let x1 = x2;
            let x2 = temp1;
            let temp1 = y1;
            let y1 = y2;
            let y2 = temp1;
        }
        if ( yGreaterThenX)
        {
            let temp1 = xDist;
            let xDist = yDist;
            let yDist = temp1;
            let j = y1;
            let i = x1;
            let rightMost = y2;
            let leftToRight = (x1 > x2);
        }
        else
        {
            let j = x1;
            let i = y1;
            let rightMost = x2;
            let leftToRight = (y1 > y2);
        }
        let temp2 = Math.multiply(2,yDist) - xDist;
        let temp3 = Math.multiply(2,yDist);
        let temp4 = Math.multiply(2, yDist-xDist );
        do Screen.drawConditional(j,i,yGreaterThenX);
        while ( j < rightMost )
        {
            if ( temp2 < 0 )
            {
                let temp2 = temp2 + temp3;
            }
            else
            {
                let temp2 = temp2 + temp4;
                if ( leftToRight )
                {
                    let i = i - 1;
                }
                else
                {
                    let i = i + 1;
                }
            }
            let j = j + 1;
            do Screen.drawConditional(j,i,yGreaterThenX);
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int rightTop;
        var int leftTop;
        var int xDist;
        var int tempX1;
        var int tempX2;
        var int byte2;
        var int byte1;
        var int x1Mod16;
        var int x2Mod16;

        if ( (x1>x2) | (y1 > y2) | (x1 < 0) | (x2 > 511) | (y1 < 0) | (y2 > 255))
        {
            do Sys.error(9);
        } 
        let tempX1 = Math.divide(x1,16);
        let x1Mod16 = x1 - Math.multiply(tempX1,16);
        let tempX2 = Math.divide(x2,16);
        let x2Mod16 = x2 - Math.multiply(tempX2,16);
        let byte1 = ~(bit[x1Mod16] - 1);
        let byte2 = bit[x2Mod16+1] - 1;
        let rightTop = Math.multiply(y1,32) + tempX1;
        let xDist = tempX2 - tempX1;
        while(~(y1 > y2))
        {
            let leftTop = rightTop + xDist;
            if ( xDist = 0)
            {
                do Screen.updateLocation(rightTop,byte2 & byte1);
            }
            else
            {
                do Screen.updateLocation(rightTop , byte1);
                let rightTop = rightTop + 1;
                while( rightTop < leftTop)
                {
                    do Screen.updateLocation(rightTop,-1);
                    let rightTop = rightTop + 1;
                }
                do Screen.updateLocation(leftTop,byte2);
            }
            let y1 = y1 + 1;
            let rightTop = leftTop + 32 - xDist;
        }
        return;
    }

    function void drawHorizontal(int x1, int y1, int x2)
    {
        var int i;
        var int leftCoor;
        var int RightCoor;
        var int maxX;
        var int byte2;
        var int byte1;
        var int horizLen;
        var int topLeft;
        var int bottomRight;
        var int leftMod16;
        var int rightMod16;

        let topLeft = Math.min(y1,x2);
        let bottomRight = Math.max(y1,x2);

        if ( (x1 > -1) & (x1 <256) & (topLeft <512) & (bottomRight > -1)  )
        {
            let topLeft = Math.max(topLeft,0);
            let bottomRight = Math.min(bottomRight,511);
            let leftCoor = Math.divide(topLeft,16);
            let leftMod16 = topLeft - Math.multiply(leftCoor,16);
            let RightCoor = Math.divide(bottomRight,16);
            let rightMod16 = bottomRight - Math.multiply(RightCoor,16);
            let byte1 = ~(bit[leftMod16] - 1);
            let byte2 = bit[rightMod16 + 1] - 1;
            let i = Math.multiply(x1,32) + leftCoor;
            let horizLen = RightCoor - leftCoor;
            let maxX = i + horizLen;
            if (horizLen = 0)
            {
                do Screen.updateLocation(i,byte2 & byte1);
            }
            else
            {
                do Screen.updateLocation(i,byte1);
                let i = i + 1;
                while( i < maxX )
                {
                    do Screen.updateLocation(i,-1);
                    let i = i + 1;
                }
                    do Screen.updateLocation(maxX,byte2);
            }
        }
        return;
    }

    function void drawSymetric(int x1, int y1, int x2, int y2)
    {
        do Screen.drawHorizontal( y1 - y2 , x1 + x2, x1-x2);
        do Screen.drawHorizontal( y1 + y2 , x1 + x2,x1-x2);
        do Screen.drawHorizontal(y1-x2,x1 - y2,x1+y2);
        do Screen.drawHorizontal(y1+x2,x1 - y2,x1+y2);
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int i;
        var int tempR1;
        var int tempR2;


        if ( (x<0) | (x>511) | (y<0) | (y>255)  )
        {
            do Sys.error(12);
        }
        if ( ((x - r) < 0) | ((x + r) > 511) | ((y - r) < 0) | ((y + r) > 255)  )
        {
            do Sys.error(13);
        }
        let tempR1 = r;
        let tempR2 = 1 - r;
        do Screen.drawSymetric(x,y,i,tempR1);
        while( tempR1 > i )
        {
            if ( tempR2 < 0 )
            {
                let tempR2 = tempR2 + Math.multiply(2,i) + 3;
            }
            else
            {
                let tempR2 = tempR2 + Math.multiply(2,(i-tempR1)) + 5;
                let tempR1 = tempR1 - 1;
            }
            let i = i + 1;
            do Screen.drawSymetric(x,y,i,tempR1);
        }
        return;
    }
}
