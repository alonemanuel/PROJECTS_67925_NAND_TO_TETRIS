/**
 * An obstacle class. In charge of creating obstacles and moving them.
 */
class Obstacle {

	field int X, Y, blockX,location;
	field boolean isExists;
	field int realXPos;

	/** Constructor for the obstacle class. */
    constructor Obstacle new() {
	let X = 31;		// counting 32 bits of every 2 blocks  
	let blockX = 29;	// counting 16 bits blocks
	let Y = 174;		// Y coordinate
	let isExists = false;	// if any Obstacle exists on the screen
	let realXPos = 511-32;  // starting point of 512 bit X position
	let location = Math.multiply(174,32) + 31 ; // memory screen location
	return this;
    }

    /** Deallocates the current obstacle memory. */
    method void dispose(){
	do Memory.deAlloc(this);
	return;
    }


    /** Shows the obstacle. */
    method void show() {
        do Screen.setColor(true);
        do draw();
        return;
    }

    /** Hides the obstacle. */
    method void hide(int location) {
	var int memAddress;
	let memAddress = 16384 + location;
	do Memory.poke(memAddress + 0, 0);
	do Memory.poke(memAddress + 32, 0);
	do Memory.poke(memAddress + 64, 0);
	do Memory.poke(memAddress + 96, 0);
	do Memory.poke(memAddress + 128, 0);
	do Memory.poke(memAddress + 160, 0);
	do Memory.poke(memAddress + 192, 0);
	do Memory.poke(memAddress + 224, 0);
	do Memory.poke(memAddress + 256, 0);
	do Memory.poke(memAddress + 288, 0);
	do Memory.poke(memAddress + 320, 0);
	do Memory.poke(memAddress + 352, 0);
	do Memory.poke(memAddress + 384, 0);
	do Memory.poke(memAddress + 416, 0);
	do Memory.poke(memAddress + 448, 0);
	do Memory.poke(memAddress + 480, 0);
	return;
    }
	
    /** Draws the obstacle. */
    method void draw() {
	do drawEntering(location,X);
	do drawLeaving(location,X);	    	    
	return;
    }

	/** Draws the obstacle entering. */
    method void drawEntering(int location,int aX)
    {
	if (aX =31 ) {do draw0(location);}   
	if (aX =30 ) {do draw1(location);}
	if (aX =29 ) {do draw2(location);}
	if (aX =28 ) {do draw3(location);}
	if (aX =27 ) {do draw4(location);}
	if (aX =26 ) {do draw5(location);}
	if (aX =25 ) {do draw6(location);}
	if (aX =24 ) {do draw7(location);}
	if (aX =23 ) {do draw8(location);}
	if (aX =22 ) {do draw9(location);}
	if (aX =21 ) {do draw10(location);}
	if (aX =20 ) {do draw11(location);}
	if (aX =19 ) {do draw12(location);}
	if (aX =18 ) {do draw13(location);}
	if (aX =17 ) {do draw14(location);}
	if (aX =16 ) {do draw15(location);}       
	return;
    }

	/** Draws the obstacle leaving. */
    method void drawLeaving(int location, int aX)
    {
	if (aX =15 ) {do draw16(location);}
	if (aX =14 ) {do draw17(location);}
	if (aX =13 ) {do draw18(location);}
	if (aX =12 ) {do draw19(location);}
	if (aX =11 ) {do draw20(location);}
	if (aX =10 ) {do draw21(location);}
	if (aX =9 ) { do draw22(location);}
	if (aX =8 ) { do draw23(location);}
	if (aX =7 ) { do draw24(location);}
	if (aX =6 ) { do draw25(location);}
	if (aX =5 ) { do draw26(location);}
	if (aX =4 ) { do draw27(location);}
	if (aX =3 ) { do draw28(location);}
	if (aX =2 ) { do draw29(location);}
	if (aX =1 ) { do draw30(location);}
	if (aX =0 ) { do draw31(location);}
	return;
    }

	/** Moves the obstacle. */
    method void move() {
	let X = X - 1;
	let realXPos = realXPos - 1;
	let location = Math.multiply(Y,32) + blockX;
	if((blockX = 31))
	{
	    do drawLeaving(location-31,X-16);
	}
	else
	{
	    
	    do drawLeaving(location+1,X-16);
	}
	do drawEntering(location,X);
	do drawLeaving(location,X);
	do drawEntering(location-1,X+16);
	
	if (X = 0)
	{
	    let blockX = blockX -2 ;
	    if (blockX = -1)
	    {
		let blockX = 31;
		let realXPos = 511;	
	    }
	    let X = 31;
	}
	return;
    }


	/** Return true iff obstacle exists. */
    method boolean isExists() {
	return isExists;
    }

    /** Getter for the X field. */
    method int getLeftX() {
	return realXPos;
    }

	/** Getter for the Y field. */
    method int getTopY() {
	return Y-16;
    }

	/** Creates obstacle. */
    method void create() {
	let X = 31;
	let isExists = true;
	return;		
    }
    
    /** The following 32 methods draws the obstacle moving continuously. */
    method void draw0(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 0);
	    do Memory.poke(memAddress + 32, 0);
	    do Memory.poke(memAddress + 64, 0);
	    do Memory.poke(memAddress + 96, 16384);
	    do Memory.poke(memAddress + 128, 16384);
	    do Memory.poke(memAddress + 160, 0);
	    do Memory.poke(memAddress + 192, 0);
	    do Memory.poke(memAddress + 224, 0);
	    do Memory.poke(memAddress + 256, 0);
	    do Memory.poke(memAddress + 288, 0);
	    do Memory.poke(memAddress + 320, 0);
	    do Memory.poke(memAddress + 352, 0);
	    do Memory.poke(memAddress + 384, 0);
	    do Memory.poke(memAddress + 416, 0);
	    do Memory.poke(memAddress + 448, 0);
	    do Memory.poke(memAddress + 480, 0);
	    return;
    }
    method void draw1(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 0);
	    do Memory.poke(memAddress + 32, 16384);
	    do Memory.poke(memAddress + 64, 16384);
	    do Memory.poke(memAddress + 96, -16384);
	    do Memory.poke(memAddress + 128, -16384);
	    do Memory.poke(memAddress + 160, 16384);
	    do Memory.poke(memAddress + 192, 16384);
	    do Memory.poke(memAddress + 224, 0);
	    do Memory.poke(memAddress + 256, 0);
	    do Memory.poke(memAddress + 288, 0);
	    do Memory.poke(memAddress + 320, 0);
	    do Memory.poke(memAddress + 352, 0);
	    do Memory.poke(memAddress + 384, 0);
	    do Memory.poke(memAddress + 416, 0);
	    do Memory.poke(memAddress + 448, 0);
	    do Memory.poke(memAddress + 480, 0);
	    return;
    }
    method void draw2(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0,0 );
	    do Memory.poke(memAddress + 32, -16384);
	    do Memory.poke(memAddress + 64, -16384);
	    do Memory.poke(memAddress + 96, -8192);
	    do Memory.poke(memAddress + 128, -8192);
	    do Memory.poke(memAddress + 160, -16384);
	    do Memory.poke(memAddress + 192, -16384);
	    do Memory.poke(memAddress + 224, 0);
	    do Memory.poke(memAddress + 256, 0);
	    do Memory.poke(memAddress + 288, 0);
	    do Memory.poke(memAddress + 320, 0);
	    do Memory.poke(memAddress + 352, 0);
	    do Memory.poke(memAddress + 384, 0);
	    do Memory.poke(memAddress + 416, 0);
	    do Memory.poke(memAddress + 448, 0);
	    do Memory.poke(memAddress + 480, 0);
	    return;
    }
    method void draw3(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, -16384);
	    do Memory.poke(memAddress + 32, -8192);
	    do Memory.poke(memAddress + 64, -8192);
	    do Memory.poke(memAddress + 96, -4096);
	    do Memory.poke(memAddress + 128, -4096);
	    do Memory.poke(memAddress + 160, -8192);
	    do Memory.poke(memAddress + 192, -8192);
	    do Memory.poke(memAddress + 224, -16384);
	    do Memory.poke(memAddress + 256, -16384);
	    do Memory.poke(memAddress + 288, 0);
	    do Memory.poke(memAddress + 320, 0);
	    do Memory.poke(memAddress + 352, 0);
	    do Memory.poke(memAddress + 384, 0);
	    do Memory.poke(memAddress + 416, 0);
	    do Memory.poke(memAddress + 448, 0);
	    do Memory.poke(memAddress + 480, 0);
	    return;
    }
    method void draw4(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 24576);
	    do Memory.poke(memAddress + 32, -4096);
	    do Memory.poke(memAddress + 64, -4096);
	    do Memory.poke(memAddress + 96, -2048);
	    do Memory.poke(memAddress + 128, -2048);
	    do Memory.poke(memAddress + 160, -4096);
	    do Memory.poke(memAddress + 192, -4096);
	    do Memory.poke(memAddress + 224, -8192);
	    do Memory.poke(memAddress + 256, -8192);
	    do Memory.poke(memAddress + 288, -16384);
	    do Memory.poke(memAddress + 320, -16384);
	    do Memory.poke(memAddress + 352, 0);
	    do Memory.poke(memAddress + 384, 0);
	    do Memory.poke(memAddress + 416, 0);
	    do Memory.poke(memAddress + 448, 0);
	    do Memory.poke(memAddress + 480, 0);
	    return;
    }
    method void draw5(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, -20480);
	    do Memory.poke(memAddress + 32, -2048);
	    do Memory.poke(memAddress + 64, -2048);
	    do Memory.poke(memAddress + 96, -1024);
	    do Memory.poke(memAddress + 128, -1024);
	    do Memory.poke(memAddress + 160, -2048);
	    do Memory.poke(memAddress + 192, -2048);
	    do Memory.poke(memAddress + 224, -4096);
	    do Memory.poke(memAddress + 256, -4096);
	    do Memory.poke(memAddress + 288, -8192);
	    do Memory.poke(memAddress + 320, -8192);
	    do Memory.poke(memAddress + 352, 0);
	    do Memory.poke(memAddress + 384, 0);
	    do Memory.poke(memAddress + 416, 0);
	    do Memory.poke(memAddress + 448, 0);
	    do Memory.poke(memAddress + 480, 0);
	    return;
    }

    method void draw6(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, -10240);
	    do Memory.poke(memAddress + 32, -1024);
	    do Memory.poke(memAddress + 64, -1024);
	    do Memory.poke(memAddress + 96, -512);
	    do Memory.poke(memAddress + 128, -512);
	    do Memory.poke(memAddress + 160, -1024);
	    do Memory.poke(memAddress + 192, -1024);
	    do Memory.poke(memAddress + 224, -2048);
	    do Memory.poke(memAddress + 256, -2048);
	    do Memory.poke(memAddress + 288, -4096);
	    do Memory.poke(memAddress + 320, -4096);
	    do Memory.poke(memAddress + 352, -16384);
	    do Memory.poke(memAddress + 384, 0);
	    do Memory.poke(memAddress + 416, 0);
	    do Memory.poke(memAddress + 448, 0);
	    do Memory.poke(memAddress + 480, 0);
	    return;
    }
    method void draw7(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, -5120);
	    do Memory.poke(memAddress + 32, -512);
	    do Memory.poke(memAddress + 64, -512);
	    do Memory.poke(memAddress + 96, -256);
	    do Memory.poke(memAddress + 128, -256);
	    do Memory.poke(memAddress + 160, -512);
	    do Memory.poke(memAddress + 192, -512);
	    do Memory.poke(memAddress + 224, -1024);
	    do Memory.poke(memAddress + 256, -1024);
	    do Memory.poke(memAddress + 288, -2048);
	    do Memory.poke(memAddress + 320, -2048);
	    do Memory.poke(memAddress + 352, -8192);
	    do Memory.poke(memAddress + 384, -16384);
	    do Memory.poke(memAddress + 416, -16384);
	    do Memory.poke(memAddress + 448, -16384);
	    do Memory.poke(memAddress + 480, -16384);
	    return;
    }
    method void draw8(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, -2560);
	    do Memory.poke(memAddress + 32, -256);
	    do Memory.poke(memAddress + 64, -256);
	    do Memory.poke(memAddress + 96, -128);
	    do Memory.poke(memAddress + 128, -128);
	    do Memory.poke(memAddress + 160, -256);
	    do Memory.poke(memAddress + 192, -256);
	    do Memory.poke(memAddress + 224, -512);
	    do Memory.poke(memAddress + 256, -512);
	    do Memory.poke(memAddress + 288, -1024);
	    do Memory.poke(memAddress + 320, -1024);
	    do Memory.poke(memAddress + 352, -4096);
	    do Memory.poke(memAddress + 384, -8192);
	    do Memory.poke(memAddress + 416, -8192);
	    do Memory.poke(memAddress + 448, -8192);
	    do Memory.poke(memAddress + 480, -8192);
	    return;
    }
    method void draw9(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 31488);
	    do Memory.poke(memAddress + 32, -128);
	    do Memory.poke(memAddress + 64, -128);
	    do Memory.poke(memAddress + 96, -64);
	    do Memory.poke(memAddress + 128, -64);
	    do Memory.poke(memAddress + 160, -128);
	    do Memory.poke(memAddress + 192, -128);
	    do Memory.poke(memAddress + 224, -256);
	    do Memory.poke(memAddress + 256, -256);
	    do Memory.poke(memAddress + 288, -512);
	    do Memory.poke(memAddress + 320, -512);
	    do Memory.poke(memAddress + 352, -2048);
	    do Memory.poke(memAddress + 384, 28672);
	    do Memory.poke(memAddress + 416, 28672);
	    do Memory.poke(memAddress + 448, 28672);
	    do Memory.poke(memAddress + 480, 28672);
	    return;
    }
    method void draw10(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, -17024);
	    do Memory.poke(memAddress + 32, -64);
	    do Memory.poke(memAddress + 64, -64);
	    do Memory.poke(memAddress + 96, -32);
	    do Memory.poke(memAddress + 128, -32);
	    do Memory.poke(memAddress + 160, -64);
	    do Memory.poke(memAddress + 192, -64);
	    do Memory.poke(memAddress + 224, -128);
	    do Memory.poke(memAddress + 256, -128);
	    do Memory.poke(memAddress + 288, -256);
	    do Memory.poke(memAddress + 320, -256);
	    do Memory.poke(memAddress + 352, 31744);
	    do Memory.poke(memAddress + 384, 14336);
	    do Memory.poke(memAddress + 416, 14336);
	    do Memory.poke(memAddress + 448, 14336);
	    do Memory.poke(memAddress + 480, 14336);
	    return;
    }
    method void draw11(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 24256);
	    do Memory.poke(memAddress + 32, -32);
	    do Memory.poke(memAddress + 64, -32);
	    do Memory.poke(memAddress + 96, -16);
	    do Memory.poke(memAddress + 128, -16);
	    do Memory.poke(memAddress + 160, 32736);
	    do Memory.poke(memAddress + 192, -32);
	    do Memory.poke(memAddress + 224, -64);
	    do Memory.poke(memAddress + 256, -64);
	    do Memory.poke(memAddress + 288, -128);
	    do Memory.poke(memAddress + 320, -128);
	    do Memory.poke(memAddress + 352, 15872);
	    do Memory.poke(memAddress + 384, 7168);
	    do Memory.poke(memAddress + 416, 7168);
	    do Memory.poke(memAddress + 448, 7168);
	    do Memory.poke(memAddress + 480, 7168);
	    return;
    }
    method void draw12(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 12128);
	    do Memory.poke(memAddress + 32, -16);
	    do Memory.poke(memAddress + 64, -16);
	    do Memory.poke(memAddress + 96, 32760);
	    do Memory.poke(memAddress + 128, -8);
	    do Memory.poke(memAddress + 160, -16400);
	    do Memory.poke(memAddress + 192, -16);
	    do Memory.poke(memAddress + 224, -32);
	    do Memory.poke(memAddress + 256, -32);
	    do Memory.poke(memAddress + 288, 32704);
	    do Memory.poke(memAddress + 320, 32704);
	    do Memory.poke(memAddress + 352, 7936);
	    do Memory.poke(memAddress + 384, 3584);
	    do Memory.poke(memAddress + 416, 3584);
	    do Memory.poke(memAddress + 448, 3584);
	    do Memory.poke(memAddress + 480, 3584);
	    return;
    }
    method void draw13(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 6064);
	    do Memory.poke(memAddress + 32, 32760);
	    do Memory.poke(memAddress + 64, -8);
	    do Memory.poke(memAddress + 96, -16388);
	    do Memory.poke(memAddress + 128, -4);
	    do Memory.poke(memAddress + 160, -8200);
	    do Memory.poke(memAddress + 192, -8);
	    do Memory.poke(memAddress + 224, 32752);
	    do Memory.poke(memAddress + 256, 32752);
	    do Memory.poke(memAddress + 288, 16352);
	    do Memory.poke(memAddress + 320, 16352);
	    do Memory.poke(memAddress + 352, 3968);
	    do Memory.poke(memAddress + 384, 1792);
	    do Memory.poke(memAddress + 416, 1792);
	    do Memory.poke(memAddress + 448, 1792);
	    do Memory.poke(memAddress + 480, 1792);
	    return;
    }
    method void draw14(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 3032);
	    do Memory.poke(memAddress + 32, 16380);
	    do Memory.poke(memAddress + 64, 32764);
	    do Memory.poke(memAddress + 96, -8194);
	    do Memory.poke(memAddress + 128, -2);
	    do Memory.poke(memAddress + 160, 28668);
	    do Memory.poke(memAddress + 192, 32764);
	    do Memory.poke(memAddress + 224, 16376);
	    do Memory.poke(memAddress + 256, 16376);
	    do Memory.poke(memAddress + 288, 8176);
	    do Memory.poke(memAddress + 320, 8176);
	    do Memory.poke(memAddress + 352, 1984);
	    do Memory.poke(memAddress + 384, 896);
	    do Memory.poke(memAddress + 416, 896);
	    do Memory.poke(memAddress + 448, 896);
	    do Memory.poke(memAddress + 480, 896);
	    return;
    }
    method void draw15(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 1516);
	    do Memory.poke(memAddress + 32, 8190);
	    do Memory.poke(memAddress + 64, 16382);
	    do Memory.poke(memAddress + 96, 28671);
	    do Memory.poke(memAddress + 128, 32767);
	    do Memory.poke(memAddress + 160, 14334);
	    do Memory.poke(memAddress + 192, 16382);
	    do Memory.poke(memAddress + 224, 8188);
	    do Memory.poke(memAddress + 256, 8188);
	    do Memory.poke(memAddress + 288, 4088);
	    do Memory.poke(memAddress + 320, 4088);
	    do Memory.poke(memAddress + 352, 992);
	    do Memory.poke(memAddress + 384, 448);
	    do Memory.poke(memAddress + 416, 448);
	    do Memory.poke(memAddress + 448, 448);
	    do Memory.poke(memAddress + 480, 448);
	    return;
    }
    method void draw16(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 758);
	    do Memory.poke(memAddress + 32, 4095);
	    do Memory.poke(memAddress + 64, 8191);
	    do Memory.poke(memAddress + 96, 14335);
	    do Memory.poke(memAddress + 128, 16383);
	    do Memory.poke(memAddress + 160, 7167);
	    do Memory.poke(memAddress + 192, 8191);
	    do Memory.poke(memAddress + 224, 4094);
	    do Memory.poke(memAddress + 256, 4094);
	    do Memory.poke(memAddress + 288, 2044);
	    do Memory.poke(memAddress + 320, 2044);
	    do Memory.poke(memAddress + 352, 496);
	    do Memory.poke(memAddress + 384, 224);
	    do Memory.poke(memAddress + 416, 224);
	    do Memory.poke(memAddress + 448, 224);
	    do Memory.poke(memAddress + 480, 224);
	    return;
    }
    method void draw17(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 379);
	    do Memory.poke(memAddress + 32, 2047);
	    do Memory.poke(memAddress + 64, 4095);
	    do Memory.poke(memAddress + 96, 7167);
	    do Memory.poke(memAddress + 128, 8191);
	    do Memory.poke(memAddress + 160, 3583);
	    do Memory.poke(memAddress + 192, 4095);
	    do Memory.poke(memAddress + 224, 2047);
	    do Memory.poke(memAddress + 256, 2047);
	    do Memory.poke(memAddress + 288, 1022);
	    do Memory.poke(memAddress + 320, 1022);
	    do Memory.poke(memAddress + 352, 248);
	    do Memory.poke(memAddress + 384, 112);
	    do Memory.poke(memAddress + 416, 112);
	    do Memory.poke(memAddress + 448, 112);
	    do Memory.poke(memAddress + 480, 112);
	    return;
    }
    method void draw18(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 189);
	    do Memory.poke(memAddress + 32, 1023);
	    do Memory.poke(memAddress + 64, 2047);
	    do Memory.poke(memAddress + 96, 3583);
	    do Memory.poke(memAddress + 128, 4095);
	    do Memory.poke(memAddress + 160, 1791);
	    do Memory.poke(memAddress + 192, 2047);
	    do Memory.poke(memAddress + 224, 1023);
	    do Memory.poke(memAddress + 256, 1023);
	    do Memory.poke(memAddress + 288, 511);
	    do Memory.poke(memAddress + 320, 511);
	    do Memory.poke(memAddress + 352, 124);
	    do Memory.poke(memAddress + 384, 56);
	    do Memory.poke(memAddress + 416, 56);
	    do Memory.poke(memAddress + 448, 56);
	    do Memory.poke(memAddress + 480, 56);
	    return;
    }
    method void draw19(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 94);
	    do Memory.poke(memAddress + 32, 511);
	    do Memory.poke(memAddress + 64, 1023);
	    do Memory.poke(memAddress + 96, 1791);
	    do Memory.poke(memAddress + 128, 2047);
	    do Memory.poke(memAddress + 160, 895);
	    do Memory.poke(memAddress + 192, 1023);
	    do Memory.poke(memAddress + 224, 511);
	    do Memory.poke(memAddress + 256, 511);
	    do Memory.poke(memAddress + 288, 255);
	    do Memory.poke(memAddress + 320, 255);
	    do Memory.poke(memAddress + 352, 62);
	    do Memory.poke(memAddress + 384, 28);
	    do Memory.poke(memAddress + 416, 28);
	    do Memory.poke(memAddress + 448, 28);
	    do Memory.poke(memAddress + 480, 28);
	    return;
    }
    method void draw20(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 47);
	    do Memory.poke(memAddress + 32, 255);
	    do Memory.poke(memAddress + 64, 511);
	    do Memory.poke(memAddress + 96, 895);
	    do Memory.poke(memAddress + 128, 1023);
	    do Memory.poke(memAddress + 160, 447);
	    do Memory.poke(memAddress + 192, 511);
	    do Memory.poke(memAddress + 224, 255);
	    do Memory.poke(memAddress + 256, 255);
	    do Memory.poke(memAddress + 288, 127);
	    do Memory.poke(memAddress + 320, 127);
	    do Memory.poke(memAddress + 352, 31);
	    do Memory.poke(memAddress + 384, 14);
	    do Memory.poke(memAddress + 416, 14);
	    do Memory.poke(memAddress + 448, 14);
	    do Memory.poke(memAddress + 480, 14);
	    return;
    }
    method void draw21(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 23);
	    do Memory.poke(memAddress + 32, 127);
	    do Memory.poke(memAddress + 64, 255);
	    do Memory.poke(memAddress + 96, 447);
	    do Memory.poke(memAddress + 128, 511);
	    do Memory.poke(memAddress + 160, 223);
	    do Memory.poke(memAddress + 192, 255);
	    do Memory.poke(memAddress + 224, 127);
	    do Memory.poke(memAddress + 256, 127);
	    do Memory.poke(memAddress + 288, 63);
	    do Memory.poke(memAddress + 320, 63);
	    do Memory.poke(memAddress + 352, 15);
	    do Memory.poke(memAddress + 384, 7);
	    do Memory.poke(memAddress + 416, 7);
	    do Memory.poke(memAddress + 448, 7);
	    do Memory.poke(memAddress + 480, 7);
	    return;
    }
    method void draw22(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 11);
	    do Memory.poke(memAddress + 32, 63);
	    do Memory.poke(memAddress + 64, 127);
	    do Memory.poke(memAddress + 96, 223);
	    do Memory.poke(memAddress + 128, 255);
	    do Memory.poke(memAddress + 160, 111);
	    do Memory.poke(memAddress + 192, 127);
	    do Memory.poke(memAddress + 224, 63);
	    do Memory.poke(memAddress + 256, 63);
	    do Memory.poke(memAddress + 288, 31);
	    do Memory.poke(memAddress + 320, 31);
	    do Memory.poke(memAddress + 352, 7);
	    do Memory.poke(memAddress + 384, 3);
	    do Memory.poke(memAddress + 416, 3);
	    do Memory.poke(memAddress + 448, 3);
	    do Memory.poke(memAddress + 480, 3);
	    return;
    }
    method void draw23(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 5);
	    do Memory.poke(memAddress + 32, 31);
	    do Memory.poke(memAddress + 64, 63);
	    do Memory.poke(memAddress + 96, 111);
	    do Memory.poke(memAddress + 128, 127);
	    do Memory.poke(memAddress + 160, 55);
	    do Memory.poke(memAddress + 192, 63);
	    do Memory.poke(memAddress + 224, 31);
	    do Memory.poke(memAddress + 256, 31);
	    do Memory.poke(memAddress + 288, 15);
	    do Memory.poke(memAddress + 320, 15);
	    do Memory.poke(memAddress + 352, 3);
	    do Memory.poke(memAddress + 384, 1);
	    do Memory.poke(memAddress + 416, 1);
	    do Memory.poke(memAddress + 448, 1);
	    do Memory.poke(memAddress + 480, 1);
	    return;
    }
    method void draw24(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 2);
	    do Memory.poke(memAddress + 32, 15);
	    do Memory.poke(memAddress + 64, 31);
	    do Memory.poke(memAddress + 96, 55);
	    do Memory.poke(memAddress + 128, 63);
	    do Memory.poke(memAddress + 160, 27);
	    do Memory.poke(memAddress + 192, 31);
	    do Memory.poke(memAddress + 224, 15);
	    do Memory.poke(memAddress + 256, 15);
	    do Memory.poke(memAddress + 288, 7);
	    do Memory.poke(memAddress + 320, 7);
	    do Memory.poke(memAddress + 352, 1);
	    do Memory.poke(memAddress + 384, 0);
	    do Memory.poke(memAddress + 416, 0);
	    do Memory.poke(memAddress + 448, 0);
	    do Memory.poke(memAddress + 480, 0);
	    return;
    }
    method void draw25(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 1);
	    do Memory.poke(memAddress + 32, 7);
	    do Memory.poke(memAddress + 64, 15);
	    do Memory.poke(memAddress + 96, 27);
	    do Memory.poke(memAddress + 128, 31);
	    do Memory.poke(memAddress + 160, 13);
	    do Memory.poke(memAddress + 192, 15);
	    do Memory.poke(memAddress + 224, 7);
	    do Memory.poke(memAddress + 256, 7);
	    do Memory.poke(memAddress + 288, 3);
	    do Memory.poke(memAddress + 320, 3);
	    do Memory.poke(memAddress + 352, 0);
	    do Memory.poke(memAddress + 384, 0);
	    do Memory.poke(memAddress + 416, 0);
	    do Memory.poke(memAddress + 448, 0);
	    do Memory.poke(memAddress + 480, 0);
	    return;
    }
    method void draw26(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 0);
	    do Memory.poke(memAddress + 32, 3);
	    do Memory.poke(memAddress + 64, 7);
	    do Memory.poke(memAddress + 96, 13);
	    do Memory.poke(memAddress + 128, 15);
	    do Memory.poke(memAddress + 160, 6);
	    do Memory.poke(memAddress + 192, 7);
	    do Memory.poke(memAddress + 224, 3);
	    do Memory.poke(memAddress + 256, 3);
	    do Memory.poke(memAddress + 288, 1);
	    do Memory.poke(memAddress + 320, 1);
	    do Memory.poke(memAddress + 352, 0);
	    do Memory.poke(memAddress + 384, 0);
	    do Memory.poke(memAddress + 416, 0);
	    do Memory.poke(memAddress + 448, 0);
	    do Memory.poke(memAddress + 480, 0);
	    return;
    }
    method void draw27(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 0);
	    do Memory.poke(memAddress + 32, 1);
	    do Memory.poke(memAddress + 64, 3);
	    do Memory.poke(memAddress + 96, 6);
	    do Memory.poke(memAddress + 128, 7);
	    do Memory.poke(memAddress + 160, 3);
	    do Memory.poke(memAddress + 192, 3);
	    do Memory.poke(memAddress + 224, 1);
	    do Memory.poke(memAddress + 256, 1);
	    do Memory.poke(memAddress + 288, 0);
	    do Memory.poke(memAddress + 320, 0);
	    do Memory.poke(memAddress + 352, 0);
	    do Memory.poke(memAddress + 384, 0);
	    do Memory.poke(memAddress + 416, 0);
	    do Memory.poke(memAddress + 448, 0);
	    do Memory.poke(memAddress + 480, 0);
	    return;
    }
    method void draw28(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 0);
	    do Memory.poke(memAddress + 32, 0);
	    do Memory.poke(memAddress + 64, 1);
	    do Memory.poke(memAddress + 96, 3);
	    do Memory.poke(memAddress + 128, 3);
	    do Memory.poke(memAddress + 160, 1);
	    do Memory.poke(memAddress + 192, 1);
	    do Memory.poke(memAddress + 224, 0);
	    do Memory.poke(memAddress + 256, 0);
	    do Memory.poke(memAddress + 288, 0);
	    do Memory.poke(memAddress + 320, 0);
	    do Memory.poke(memAddress + 352, 0);
	    do Memory.poke(memAddress + 384, 0);
	    do Memory.poke(memAddress + 416, 0);
	    do Memory.poke(memAddress + 448, 0);
	    do Memory.poke(memAddress + 480, 0);
	    return;
    }	
    method void draw29(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 0);
	    do Memory.poke(memAddress + 32, 0);
	    do Memory.poke(memAddress + 64, 0);
	    do Memory.poke(memAddress + 96, 1);
	    do Memory.poke(memAddress + 128, 1);
	    do Memory.poke(memAddress + 160, 0);
	    do Memory.poke(memAddress + 192, 0);
	    do Memory.poke(memAddress + 224, 0);
	    do Memory.poke(memAddress + 256, 0);
	    do Memory.poke(memAddress + 288, 0);
	    do Memory.poke(memAddress + 320, 0);
	    do Memory.poke(memAddress + 352, 0);
	    do Memory.poke(memAddress + 384, 0);
	    do Memory.poke(memAddress + 416, 0);
	    do Memory.poke(memAddress + 448, 0);
	    do Memory.poke(memAddress + 480, 0);
	    return;
    }
    method void draw30(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 0);
	    do Memory.poke(memAddress + 32, 0);
	    do Memory.poke(memAddress + 64, 0);
	    do Memory.poke(memAddress + 96, 0);
	    do Memory.poke(memAddress + 128, 0);
	    do Memory.poke(memAddress + 160, 0);
	    do Memory.poke(memAddress + 192, 0);
	    do Memory.poke(memAddress + 224, 0);
	    do Memory.poke(memAddress + 256, 0);
	    do Memory.poke(memAddress + 288, 0);
	    do Memory.poke(memAddress + 320, 0);
	    do Memory.poke(memAddress + 352, 0);
	    do Memory.poke(memAddress + 384, 0);
	    do Memory.poke(memAddress + 416, 0);
	    do Memory.poke(memAddress + 448, 0);
	    do Memory.poke(memAddress + 480, 0);
	    return;
    }
    method void draw31(int location) {
	    var int memAddress;
	    let memAddress = 16384 + location;
	    do Memory.poke(memAddress + 0, 0);
	    do Memory.poke(memAddress + 32, 0);
	    do Memory.poke(memAddress + 64, 0);
	    do Memory.poke(memAddress + 96, 0);
	    do Memory.poke(memAddress + 128, 0);
	    do Memory.poke(memAddress + 160, 0);
	    do Memory.poke(memAddress + 192, 0);
	    do Memory.poke(memAddress + 224, 0);
	    do Memory.poke(memAddress + 256, 0);
	    do Memory.poke(memAddress + 288, 0);
	    do Memory.poke(memAddress + 320, 0);
	    do Memory.poke(memAddress + 352, 0);
	    do Memory.poke(memAddress + 384, 0);
	    do Memory.poke(memAddress + 416, 0);
	    do Memory.poke(memAddress + 448, 0);
	    do Memory.poke(memAddress + 480, 0);
	    return;
    }
}
